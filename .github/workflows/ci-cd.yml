name: CI/CD Pipeline

on:
  push:
    branches:
      - master


jobs:

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Run Tests
      run: mvn test

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --severity-threshold=critical

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}  

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0 #fetch tags also

    - name: Bump Version
      id: bump
      uses: nnichols/maven-version-bump-action@v3
      with:
        github-token: ${{ secrets.github_token }}
  
    - name: Extract new version from tag
      id: version
      run: |
        VERSION=$(git describe --tags)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update pom.xml to match tag version
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
        mvn versions:commit
      
    - name: Build JAR
      run: mvn clean package

    - name: Install Trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.49.1_Linux-64bit.deb
        sudo dpkg -i trivy_0.49.1_Linux-64bit.deb

    - name: Scan Dockerfile
      run: trivy config --exit-code 1 --severity HIGH,CRITICAL .

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


    - name: Build Docker Image with Version Tag
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }} .

    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_USER_NAME: ${{ secrets.EC2_USER_NAME }}
      EC2_HOSTS: ${{ secrets.EC2_HOSTS }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      VERSION: ${{ needs.build.outputs.version }}
    

    steps:
    - name: Deploy to EC2
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        echo "Connecting to: ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOSTS }}"

        ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOSTS }} << EOF
          # Install Docker if it's missing
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Deploy the app
          sudo docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
          sudo docker pull $DOCKER_USERNAME/simple-java-app:$VERSION
          sudo docker stop app || true
          sudo docker rm app || true
          sudo docker run --name app $DOCKER_USERNAME/simple-java-app:$VERSION
        EOF

