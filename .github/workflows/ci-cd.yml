name: CI/CD Pipeline

on:
  push:
    branches:
      - master


jobs:

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Run Tests
      run: mvn test

  static-analysis:
    needs: test
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Build and Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=liranbz23_simple-java-maven-app -Dsonar.organization=liranbz23 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_CLOUD_TOKEN }}

  dependency-scan:
    needs: static-analysis
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --severity-threshold=critical

  build:
    needs: dependency-scan
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}  

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0 #fetch tags also


    - name: Bump Version
      id: bump
      uses: nnichols/maven-version-bump-action@v3
      with:
        github-token: ${{ secrets.github_token }}
  
    - name: Extract new version from tag
      id: version
      run: |
        VERSION=$(git describe --tags)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update pom.xml to match tag version
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
        mvn versions:commit
      
    - name: Build JAR
      run: mvn clean package

    - name: Install Trivy (latest)
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y


    - name: Scan Dockerfile
      run: trivy config --exit-code 1 --severity HIGH,CRITICAL .

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


    - name: Build Docker Image with Version Tag
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }} .

    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}

    - name: Install Cosign
      run: |
        curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
        chmod +x cosign-linux-amd64
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign

    - name: Sign Docker Image
      env:
        COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: cosign sign --yes --key env://COSIGN_KEY ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}

  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_USER_NAME: ${{ secrets.EC2_USER_NAME }}
      EC2_HOSTS: ${{ secrets.EC2_HOSTS }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      VERSION: ${{ needs.build.outputs.version }}
    

    steps:
    - name: Install Cosign
      run: |
        curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
        chmod +x cosign-linux-amd64
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign

    - name: Verify Docker Image
      env:
        COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
      run: cosign verify --key env://COSIGN_PUBLIC_KEY ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}
    
    - name: Deploy to EC2
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        echo "Connecting to: ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOSTS }}"

        ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOSTS }} << EOF
          # Install Docker if it's missing
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Deploy the app
          sudo docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
          sudo docker pull $DOCKER_USERNAME/simple-java-app:$VERSION
          sudo docker stop app || true
          sudo docker rm app || true
          sudo docker run --name app $DOCKER_USERNAME/simple-java-app:$VERSION
        EOF

