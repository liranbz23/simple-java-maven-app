name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Bump Version
      id: bump
      uses: nnichols/maven-version-bump-action@v3
      with:
        github-token: ${{ secrets.github_token }}


    - name: Extract new version from tag
      id: version
      run: |
        VERSION=$(git describe --tags)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'


    - name: Update pom.xml to match tag version
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
        mvn versions:commit

    - name: Run Tests
      run: mvn test
      
    - name: Build JAR
      run: mvn clean package

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


    - name: Build Docker Image with Version Tag
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }} .

    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}

    - name: Deploy to EC2
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        echo "Connecting to: $EC2_USER@$EC2_HOST"

        ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST << 'EOF'
          # Install Docker if it's missing
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $EC2_USER
          fi

          # Deploy the app
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker pull ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}
          docker stop app || true
          docker rm app || true
          docker run -d --name app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simple-java-app:${{ steps.version.outputs.version }}
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        EC2_USER: ${{ vars.EC2_USER_NAME }}
        EC2_HOST: ${{ vars.EC2_HOSTS }}
